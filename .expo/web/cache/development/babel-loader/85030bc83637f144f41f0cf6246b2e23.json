{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/engeldb/Documents/Projects/myProjects/focusTime/src/features/timer/timer.js\";\n\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Countdown } from \"../../components/countdown\";\nimport { RoundedButton } from \"../../components/roundedButton\";\nimport { colors } from \"../../utils/colors\";\nimport { fontSizes, spacing } from \"../../utils/sizes\";\nexport var Timer = function Timer(_ref) {\n  var focusSubject = _ref.focusSubject;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isStarted = _useState2[0],\n      setIsStarted = _useState2[1];\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.countdown,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, React.createElement(Countdown, {\n    isPaused: !isStarted,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  })), React.createElement(View, {\n    style: {\n      padding: spacing.xl\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, \"Focusing on: \"), React.createElement(Text, {\n    style: styles.task,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, focusSubject)), React.createElement(View, {\n    style: styles.buttonWrapper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, isStarted ? React.createElement(RoundedButton, {\n    title: \"Pause\",\n    size: 100,\n    onPress: function onPress() {\n      return setIsStarted(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }) : React.createElement(RoundedButton, {\n    title: \"Start\",\n    size: 100,\n    onPress: function onPress() {\n      return setIsStarted(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  })));\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  title: {\n    color: colors.white,\n    textAlign: 'center'\n  },\n  task: {\n    color: colors.white,\n    fontWeight: 'bold',\n    fontSize: fontSizes.lg,\n    textAlign: 'center'\n  },\n  countdown: {\n    flex: 0.5,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  buttonWrapper: {\n    flex: 0.25,\n    padding: spacing.md,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n});","map":{"version":3,"sources":["/Users/engeldb/Documents/Projects/myProjects/focusTime/src/features/timer/timer.js"],"names":["React","useState","Countdown","RoundedButton","colors","fontSizes","spacing","Timer","focusSubject","isStarted","setIsStarted","styles","container","countdown","padding","xl","title","task","buttonWrapper","StyleSheet","create","flex","color","white","textAlign","fontWeight","fontSize","lg","alignItems","justifyContent","md"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;AAEA,SAASC,SAAT;AACA,SAASC,aAAT;AAEA,SAASC,MAAT;AACA,SAASC,SAAT,EAAoBC,OAApB;AAEA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAAsB;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;;AACzC,kBAAkCP,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOQ,SAAP;AAAA,MAAkBC,YAAlB;;AACA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAW,IAAA,QAAQ,EAAE,CAACJ,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADA,EAIE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEK,MAAAA,OAAO,EAAER,OAAO,CAACS;AAAnB,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEJ,MAAM,CAACK,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEL,MAAM,CAACM,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BT,YAA3B,CAFF,CAJF,EAQE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEG,MAAM,CAACO,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCT,SAAS,GACV,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAC,OAArB;AAA6B,IAAA,IAAI,EAAE,GAAnC;AAAwC,IAAA,OAAO,EAAE;AAAA,aAAMC,YAAY,CAAC,KAAD,CAAlB;AAAA,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADU,GAEV,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAC,OAArB;AAA6B,IAAA,IAAI,EAAE,GAAnC;AAAwC,IAAA,OAAO,EAAE;AAAA,aAAMA,YAAY,CAAC,IAAD,CAAlB;AAAA,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHA,CARF,CADF;AAiBD,CAnBM;AAqBP,IAAMC,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC/BR,EAAAA,SAAS,EAAE;AACTS,IAAAA,IAAI,EAAE;AADG,GADoB;AAI/BL,EAAAA,KAAK,EAAE;AACLM,IAAAA,KAAK,EAAElB,MAAM,CAACmB,KADT;AAELC,IAAAA,SAAS,EAAE;AAFN,GAJwB;AAQ/BP,EAAAA,IAAI,EAAE;AACJK,IAAAA,KAAK,EAAElB,MAAM,CAACmB,KADV;AAEJE,IAAAA,UAAU,EAAE,MAFR;AAGJC,IAAAA,QAAQ,EAAErB,SAAS,CAACsB,EAHhB;AAIJH,IAAAA,SAAS,EAAE;AAJP,GARyB;AAc/BX,EAAAA,SAAS,EAAE;AACTQ,IAAAA,IAAI,EAAE,GADG;AAETO,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE;AAHP,GAdoB;AAmB7BX,EAAAA,aAAa,EAAE;AACfG,IAAAA,IAAI,EAAE,IADS;AAEfP,IAAAA,OAAO,EAAER,OAAO,CAACwB,EAFF;AAGfD,IAAAA,cAAc,EAAE,QAHD;AAIfD,IAAAA,UAAU,EAAE;AAJG;AAnBc,CAAlB,CAAf","sourcesContent":["import React, { useState } from 'react';\nimport { View, StyleSheet, Text } from 'react-native';\nimport { Countdown } from '../../components/countdown';\nimport { RoundedButton } from '../../components/roundedButton'\n\nimport { colors } from '../../utils/colors';\nimport { fontSizes, spacing } from '../../utils/sizes';\n\nexport const Timer = ({ focusSubject }) => {\n  const [isStarted, setIsStarted] = useState(false);\n  return (\n    <View style={styles.container}>\n    <View style={styles.countdown}>\n      <Countdown isPaused={!isStarted}/>\n    </View>\n      <View style={{ padding: spacing.xl }}>\n        <Text style={styles.title}>Focusing on: </Text>\n        <Text style={styles.task}>{focusSubject}</Text>\n      </View>\n      <View style={styles.buttonWrapper}>\n      {isStarted ? (\n      <RoundedButton title='Pause' size={100} onPress={() => setIsStarted(false)}/> ):(\n      <RoundedButton title='Start' size={100} onPress={() => setIsStarted(true)}/> \n      )}\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  title: {\n    color: colors.white,\n    textAlign: 'center',\n  },\n  task: {\n    color: colors.white,\n    fontWeight: 'bold',\n    fontSize: fontSizes.lg,\n    textAlign: 'center',\n  },\n  countdown: {\n    flex: 0.5,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n    buttonWrapper: {\n    flex: 0.25,\n    padding: spacing.md,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  }\n});\n"]},"metadata":{},"sourceType":"module"}